@mixin pixelPerfect($page: '', $top: 0) {
  #pixel_perfect {
    $img: '#{$page}.png';

    position: absolute;
    // top: -194px;
    top: $top;
    left: 0;
    z-index: $zMax;
    size: 100%;
    background: url(../assets/img/#{$img}) center top repeat-y;
    // background-size: cover;
    background-attachment: scroll;
    opacity: 0.5;
  }
}

@mixin fonts($fontFamily, $weight: normal, $style: normal) {
  $rootPath: '/assets/fonts';

  @font-face {
    font-family: $fontFamily;
    src: url('#{$rootPath}/#{$fontFamily}/#{$fontFamily}.eot');
    src: url('#{$rootPath}/#{$fontFamily}/#{$fontFamily}.eot?#iefix')
        format('embedded-opentype'),
      url('#{$rootPath}/#{$fontFamily}/#{$fontFamily}.woff2') format('woff2'),
      url('#{$rootPath}/#{$fontFamily}/#{$fontFamily}.woff') format('woff'),
      url('#{$rootPath}/#{$fontFamily}/#{$fontFamily}.ttf') format('truetype');
    font-weight: $weight;
    font-style: $style;
  }
}

@mixin cssProp($property, $value) {
  #{$property}: unquote($value);
}

@mixin margin($value) {
  // margin: unquote($value);
  @include cssProp(margin, $value);
}

@mixin border($value) {
  // border: unquote($value);
  @include cssProp(border, $value);
}

@mixin borderTopRadius($value) {
  // border-top-radius: unquote($value);
  @include cssProp('border-top-radius', $value);
}

@mixin borderRightRadius($value) {
  // border-right-radius: unquote($value);
  @include cssProp('border-right-radius', $value);
}

@mixin borderBottomRadius($value) {
  // border-bottom-radius: unquote($value);
  @include cssProp('border-bottom-radius', $value);
}

@mixin borderLeftRadius($value) {
  // border-left-radius: unquote($value);
  @include cssProp('border-left-radius', $value);
}

@mixin padding($value) {
  // padding: unquote($value);
  @include cssProp(padding, $value);
}

@mixin size($value) {
  // size: unquote($value);
  @include cssProp(size, $value);
}

@mixin position($value) {
  @include cssProp(position, $value);
}

@mixin oneLineBlock($height, $border: 0) {
  height: $height;
  line-height: $height - $border * 2;
}

@mixin percentsToOpacity($percents) {
  // $percents: $value*100/$max;
  opacity: $percents * 0.01;
}

@mixin widthToPercents($value, $total) {
  $per: $value * 100%;
  // $total: $total - 2 * $totalPadding;

  width: calc(#{$per}/#{$total});
}
